/*
 * i2c.h
 *
 *  Created on: 3 нояб. 2017 г.
 *      Author: GennadyTanchin <g.tanchin@yandex.ru>
 */

#ifndef THERMO_H_
#define THERMO_H_

#include "stm32l0xx.h"


/*  ========================  Типы датчиков и их параметры ====================================
 * Тип      Название            Номер   Назначение                                  Формат данных               Ед. измерения
 * устр.                        типа
 *                              устр.
 *
 * Датчик    Термодатчик         0       Измерение температуры воздуха               знаковое целое    16бит     0.1 гр.Ц
 * Датчик    Термодатчик воды    1       Измерение температуры водоснабжения         знаковое целое    16бит     0.1 гр.Ц
 * Датчик    Термодатчик воды    2       Измерение температуры отопления             знаковое целое    16бит     0.1 гр.Ц
 * Датчик    Датчик освещенности 3       Измерение освещенности                      беззнаковое целое 16бит     0.1 люкс
 * Датчик    Датчик влажности    4       Измерение относительной  влажности воздуха  беззнаковое целое 8бит      1 %
 * Датчик    Датчик протечки     5       Определение наличия/отсутствия воды         логическое        (Да/Нет)  1 бит
 * Датчик    Датчик счетчика     6       Считывание импульсов счетчика               беззнаковое       8/16/32   1 импульс
 *                                       электроэнергии, воды, газа и т.п.                             бит
 * Датчик    Датчик контакта     7       Определение открытия/закрытия двери,        логическое        (Да/Нет)  1 бит
 *                                       окна, концевой датчик и т.п.
 * Датчик    Датчик дыма         8       Определение  наличия/отсутствия дыма (пыли) логическое        (Да/Нет)  1 бит
 * Датчик    Датчик пламени      9       Определение  наличия/отсутствия пламени     логическое        (Да/Нет)  1 бит
 * Датчик    Датчик присутствия  10      Определение  наличия/отсутствия объекта     логическое        (Да/Нет)  1 бит
 * Датчик    Датчик движения     11      Определение  наличия/отсутствия движения    целое          (три состояния: + / 0 / -) 1 байт
 * Датчик    ИК считыватель      12      Считывание управляющих последовательностей  блок данных                 1 байт
 * Датчик    Часы реального      13      Показания часов реальн. врем.               UnixTime (4байт)+           1 сек +
 *           времени                                                                 субсекутды(1байт)           1/256 сек
 *--------------------------------------------------------------------------------------------------------------------------------------
 * Тип                          Название  Номер   Назначение                          Формат данных                 Ед. измерения
 * устр.                                  типа
 *                                        устр.

 * Исполнительное устройство   Реле        14  Включение/выключение нагрузки           логическое (Да/Нет) 1 бит
 * Исполнительное устройство   "Диммер"    15  Изменение мощности нагрузки             беззнаковый байт    1 байт    1%
 * Исполнительное устройство   Термореле   16  Включение/выключение                    знаковое целое      16бит     0.1 гр.Ц
 *                                             нагревателя/охладителя
 * Исполнительное устройство   ИК пульт    17  ИК управление                           блок данных         1 байт
 *                             управления
 * Исполнительное устройство   Привод      18  Управление положением задвижки/крана    знаковое целое      8/16 бит  1 гр. угл.
 *                             задвижки/
 *                             крана
 * Исполнительное устройство   Привод      19  Управление линейным перемещением
 *                             двигателя       (привод штор, ворот, … )                знаковое целое      8/16/32   1 мм.
 *                             линейного                                                                   бит
 *                             перемещения
 * Исполнительное устройство   Шаговый     20  Шаговое управление механизмами          знаковое целое      8/16/32   1 шаг
 *                             двигатель                                                                   бит
 * Исполнительное устройство   Часы        21  Календарь, часы, будильник, таймер      UnixTime (4байт)+
 *                             реального                                               субсекутды(1 байт)             1 сек + 1/256 сек
 *                             времени
 *
 */

#define SENS_TYPE             0   // Датчик освещенности

#define TMP75_ADDR     0x48      // I2C-Адрес термодатчика с учетом сдвига под R/NW-бит
#define R_NW            0x01      // R/NW-бит

#define TMP75_REG_CR   0x01      //Адрес регистра конфигурации
#define TMP75_REG_T    0x00      //Адрес регистра температуры

#define TMP75_SD       (uint8_t)0x01      // Маска бита ShutDown Mode (SD)
#define TMP75_TM       (uint8_t)0x02      // Маска бита Thermostat Mode (TM)
#define TMP75_R09      (uint8_t)0x00      // Маска точности 0.5 гр.Ц (9 бит)
#define TMP75_R10      (uint8_t)0x20      // Маска точности 0.25 гр.Ц (10 бит)
#define TMP75_R11      (uint8_t)0x40      // Маска точности 0.125 гр.Ц (11 бит)
#define TMP75_R12      (uint8_t)0x60      // Маска точности 0.0625 гр.Ц (12 бит)
#define TMP75_OS       (uint8_t)0x80      // Маска бита START One-Shot

#define TMP75_ACCUR       9		// Точность измерения (здесь допустимо 9 - 0.5гр.Ц и 10 - 0.25гр.Ц)
#define TMP75_REG_ACCUR   (((TMP75_ACCUR) - 9) << 5)
#define TO_MESUR_DELAY   (28 * (1 << (TMP75_ACCUR - 9)))

//#define TMP75_START      0x02      // Значение CR - проснутся
//#define TMP75_STOP      0x03      // Значение CR - уснуть

#define I2C_TOUT        20

typedef enum {
  TMP75_REG_TO,
  TMP75_REG_CFG,
  TMP75_REG_HI,
  TMP75_REG_LOW,
} eTmp75Reg;


void tmp75Init( void );

// Считывание регистра из TMP75
uint8_t tmp75RegRead( uint8_t regAddr );
// Останов TMP75
void tmp75Stop( void );
// Запуск конвертирования температуры
void tmp75Start( void );
// Считывание измеренной температуры
uint16_t tmp75ToRead( void );

uint8_t thermoRead( void );

void thermoIrqHandler( void );

#endif /* THERMO_H_ */
