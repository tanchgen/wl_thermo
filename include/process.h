/*
 * procecc.h
 *
 *  Created on: 7 нояб. 2017 г.
 *      Author: GennadyTanchin <g.tanchin@yandex.ru>
 */

#ifndef PROCESS_H_
#define PROCESS_H_

#include "stm32l0xx.h"
#include "my_time.h"

/*
 * Тип      Название            Номер   Назначение                                  Формат данных               Ед. измерения
 * устр.                        типа
 *                              устр.
 *
 * Датчик    Термодатчик         0       Измерение температуры воздуха               знаковое целое    16бит     0.1 гр.Ц
 * Датчик    Термодатчик воды    1       Измерение температуры водоснабжения         знаковое целое    16бит     0.1 гр.Ц
 * Датчик    Термодатчик воды    2       Измерение температуры отопления             знаковое целое    16бит     0.1 гр.Ц
 * Датчик    Датчик освещенности 3       Измерение освещенности                      беззнаковое целое 16бит     0.1 люкс
 * Датчик    Датчик влажности    4       Измерение относительной  влажности воздуха  беззнаковое целое 8бит      1 %
 * Датчик    Датчик протечки     5       Определение наличия/отсутствия воды         логическое        (Да/Нет)  1 бит
 * Датчик    Датчик счетчика     6       Считывание импульсов счетчика               беззнаковое       8/16/32   1 импульс
 *                                       электроэнергии, воды, газа и т.п.                             бит
 * Датчик    Датчик контакта     7       Определение открытия/закрытия двери,        логическое        (Да/Нет)  1 бит
 *                                       окна, концевой датчик и т.п.
 * Датчик    Датчик дыма         8       Определение  наличия/отсутствия дыма (пыли) логическое        (Да/Нет)  1 бит
 * Датчик    Датчик пламени      9       Определение  наличия/отсутствия пламени     логическое        (Да/Нет)  1 бит
 * Датчик    Датчик присутствия  10      Определение  наличия/отсутствия объекта     логическое        (Да/Нет)  1 бит
 * Датчик    Датчик движения     11      Определение  наличия/отсутствия движения    целое          (три состояния: + / 0 / -) 1 байт
 * Датчик    ИК считыватель      12      Считывание управляющих последовательностей  блок данных                 1 байт
 * Датчик    Часы реального      13      Показания часов реальн. врем.               UnixTime (4байт)+           1 сек +
 *           времени                                                                 субсекутды(1байт)           1/256 сек
 *--------------------------------------------------------------------------------------------------------------------------------------
 * Тип                          Название  Номер   Назначение                          Формат данных                 Ед. измерения
 * устр.                                  типа
 *                                        устр.

 * Исполнительное устройство   Реле        14  Включение/выключение нагрузки           логическое (Да/Нет) 1 бит
 * Исполнительное устройство   Термореле   15  Включение/выключение                    знаковое целое      16бит     0.1 гр.Ц
 *                                             нагревателя/охладителя
 * Исполнительное устройство   ИК пульт    16  ИК управление                           блок данных         1 байт
 *                             управления
 * Исполнительное устройство   Привод      17  Управление положением задвижки/крана    знаковое целое      8/16 бит  1 гр. угл.
 *                             задвижки/
 *                             крана
 * Исполнительное устройство   Привод      18  Управление линейным перемещением
 *                             двигателя       (привод штор, ворот, … )                знаковое целое      8/16/32   1 мм.
 *                             линейного                                                                   бит
 *                             перемещения
 * Исполнительное устройство   Шаговый     19  Шаговое управление механизмами          знаковое целое      8/16/32   1 шаг
 *                             двигатель                                                                   бит
 * Исполнительное устройство   Часы        20  Календарь, часы, будильник, таймер      UnixTime (4байт)+
 *                             реального                                               субсекутды(1 байт)             1 сек + 1/256 сек
 *                             времени
 *
 */

#define SEND_TOUT			6		// Период передачи показаний в минутах
#define CSMA_COUNT_MAX	5		// Максимальное количество попыток ожидания свободного радиоканала

// Список команд
typedef enum {
  CMD_QUERY_RTC = 1,      // Запрос ЧРВ
  CMD_NETID,              // Адрес сети 0x02
  CMD_ADDRNODE,           // Адрес термоподвески 0x03
  CMD_CHANNEL,           	// Номер радиоканала 0x04
  CMD_MESUR_TOUT,        	// Интервал измерения, секунд 0x05
  CMD_ACCUR,             	// Точность представления данных 0x05
  CMD_SENS_SEND,           	// Значение показаний датчика
  CMD_SENS_RESP,           	// ПОдтверждение получения показаний датчика
  CMD_SENS_CFG,            	// Отправка показаний датчика с запросом конфигурации
  CMD_SENS_CFG_RESP,       	// Подтверждение получения показаний датчика и отправка конфигурации
} eCmd;

// Список ошибок выполнения команд
enum {
  CMD_ERR_OK,         // Нет ошибок
  CMD_ERR_INVALID,    // Неправильная команда
  CMD_ERR_PARAM,      // Ошибка параметра
  CMD_ERR_EXEC        // Ошибка выполнения команды
};

// Типы датчиков
typedef enum {
  SENS_TYPE_TO = 0,         // Температура воздуха
  SENS_TYPE_TWATER = 1,     // Температура воды
  SENS_TYPE_THEART = 2,     // Температура системы отопления
  SENS_TYPE_LS = 3,         // Освещенности
  SENS_TYPE_COUNT = 6,  // Освещенности
  SENS_TYPE_SW = 7,         // Контктный
  SENS_TYPE_PIR = 11,   // ИК Движения
  DRIV_TYPE_REL = 14,   // Исп.устр. РЕЛЕ
} eSensType;

extern tUxTime sendTryStopTime;

void mesureStart( void );
void wutIrqHandler( void );
int8_t dataSendTry( void );
void csmaRun( void );
void csmaPause( void );
void txEnd( void );         // Завершение передачи: Очистка флагов и данных.

inline void deepSleepOn( void ){
  // STOP mode (SLEEPDEEP) enable
  SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
}
inline void deepSleepOff( void ){
  // STOP mode (SLEEPDEEP) disable
  SCB->SCR &= ~SCB_SCR_SLEEPDEEP_Msk;
}


#endif /* PROCESS_H_ */
